[{"content":"一直在愁女朋友生日准备什么礼物，刚好看到象友做了叶拓，真是再适合不过的礼物了。网上查了查制作方法 、看了看视频 ，就决定用叶子本身的颜色、而不是用颜料，来拓印到帆布袋上。\n第一步：选布面 帆布袋、方巾、衣服都可以，感觉是棉的就行，我也不太了解有什么限制。我选择的是帆布袋，亚马逊上买到的，自然颜色，密度是145gr/m2，最后印出来效果感觉很不错。这个视频 提到说，白色布和黄色布印出来的效果不一样。如果方便买到不同颜色的布的话，可以都买来试试。我很想试，但太难搞了，感觉在浪费钱\u0026hellip;也不想拥有20个帆布袋\u0026hellip;\n第二步：找叶子 我是打算做秋天的主题，想使用一些黄色、红色的叶子。也只想捡落叶，不想从植物上掰。后面拓的时候就发现，这是给自己找了多大的难题。落叶的含水量会低很多，变黄、变红的叶子的含水量也比绿色落叶更低，导致要花很多的功夫才能让颜色印在布上面。这也导致了有些容易流失水分的叶子必须制作当天采集。如果叶子表面比较光滑、摸起来硬一些，这种可以隔天，水分还是会保留下来。如果第一次尝试想轻松一点，就找一些水分多的叶子。如果还是希望颜色丰富选择一些水分少的也不用担心，后面拓的时候也有一点小窍门～\n找叶子要注意的另外一点就是，每种叶子多找几个。一是因为可以每种先拿一个在多余的布上试试拓出来的效果（颜色和脉络），选出更喜欢的叶子，也给正式制作一些灵感、多一些练习；二是给正式制作留一些余地。如果还没想好做什么，就也不知道到底需要几片叶子。再就是在摆到布上面的时候，会发现叶子的大小跟捡的时候的感觉很不一样，可以大大小小都捡一些。\n找叶子这个过程太快乐了。第一次把眼睛长在地上长在叶子上，就发现了家旁边原来有这么丰富的植物种类，发现原来有些树的叶子如此不对称。不同的叶子的软硬、含水量在手里的触感是如此不同。不同时间掉落的叶子拥有不同的干枯状态。这一切都太神奇了。\n不同干枯状态的同种叶子 还会遇到一些惊喜，我在花坛里捡叶子的时候，发现背面有一只蜗牛。我真的是太喜欢这个叶子了，站在那里纠结半天，最后还是放了回去，希望蜗牛没觉得被打扰。\n在叶子上安家的蜗牛 找叶子这个过程也会有一些压力，因为要顶住路人注视。我想捡的一种叶子是行道树，还在商场旁边，做了很久心里建设才蹲下来仔细看每一个落叶。路人一定会好奇会看的，不过捡多了就不怕了，脸皮会越来越厚的！还有就是，毕竟是从地上捡，怕脏的朋友们记得带纸巾或者洗手液。\n关于捡叶子的地点，我主要是捡的家附近的路边的植物，还在街区公园捡到了可爱的红色小树叶。我也去了植物园，但没捡到什么，一个是落叶不太多，二是感觉反而没有行道树好看。可能植物园更在意的是花朵吧，倒是有可能在地上捡到一些花瓣。不过重要的就是享受这个过程，没有捡到合适的树叶也可能在植物园里发现别的美好事物。这种悠闲又好奇的心情，太让人觉得舒适了。把一兜叶子带回家的时候，仿佛也把秋天带回来了。\n一片美丽的枫叶 第三步：拓印 在拓印这一步我好像能犯的错误都犯了哈哈哈哈哈哈。\n1 场地 首先要找到一个平整的场地。我在阳台上搞的，想着能尽量降低一下噪音。结果忘记了地面是迷你块的瓷砖，垫的袋子根本不够厚，把地砖缝也印出来了\u0026hellip;一点也没敲上色\u0026hellip;如果想做一些图案倒是个很好的办法，但如果不是的话，一定找个板子垫在下面，我最后垫的菜板。锤的声音还是挺大的，而且还需要锤很久，对我来说最理想的场地可能就是室外了。\n2 工具 网上教程都说用橡皮锤。我本来也打算去买一个的，但想想，我的宜家套装里的锤子也有个橡皮套，四舍五入就是橡皮锤了，最后就没买。拓的时候发现，用橡皮锤还是有道理的，宜家这个锤子太重了，锤到我怀疑人生。第二天发现大拇指磨掉了一层皮，如果跟我一样莽的请记得戴手套。橡皮锤好像头也更小一些，感觉可以拓得更精细。\n3 方式 叶子要提前清洗擦干。清洗一串叶子的时候要小心，这些叶子也许一碰就掉了。这种叶子我就是用最小的水流冲了冲正面和背面，还是掉了一些。不过没关系，记住叶子的生长方式（排列和方向），留好，等到时候拼一拼就好了。\n清洗叶子 我先把我想用的叶子在一个帆布袋上锤了锤，试了试，看看颜色，试图掌握一些锤的技巧。仔细感受了一下锤多久能出颜色，感受了下出颜色的叶子的状态。锤完之后的叶子非常有趣，放阳光下看感觉像编织袋。之前提到的有蜗牛的那种硬的洗洗的叶子，在敲碎之后还会闻到捡的时候完全闻不到的味道，真好闻啊！\n锤过的叶子的纹路 试完之后就拿了一个新的帆布袋在上面摆了摆图案，用手机拍了一张效果图。之后就拿到阳台上准备开始拓了。我在上面和下面都垫了塑料透明的袋子，下面是防止印到帆布袋的背面，上面是为了能看到锤的位置和不让颜色沾到锤子上面。叶子正面反面的效果也不一样，以及背面的水分会比正面多，我都是正面朝上，让背面接触布料。\n锤的时候最好直上直下地锤，因为叶子可能会被锤跑。最开始就慢慢来，找找感觉。锤的时候我有把叶子掀起来看有没有印上去，没印上去的感觉确实很沮丧，我也把叶子锤跑过，但摆回位置继续锤就行，不用太担心，相信自然就好啦。\n之前又说到我捡的叶子水分不是很够，我想了想，觉得是需要更好地方式把水锤出来，也就是更严重地破坏叶子来让水渗透出来。最后就用的锤子另外一面用来拔钉子的，扁扁的，果然更有效了。但要注意的是，这种扁的，锤出来的效果会是一条一条的线（见下图），可能也没什么叶子的脉络。还是像前面说的，先在别的布上试一试，看看是不是能接受的效果。\n扁面锤出的横纹效果 网上的教程还提到了固色剂，来保留颜色。我没买，想着，就让\u0026quot;叶子\u0026quot;们自然下去吧。\n⚠️：拓的过程一定注意休息\n第四步：享受成果 说是享受成果，其实是收拾残局，把叶子们都收拾好处理掉，各种工具进行归位，拓这个过程真的是极大地损伤了我的积极性，用没什么水分的叶子的自身的颜色拓真是太难了。不过等收好休息好之后，看看成品，真的很开心。虽然成品上到处都是遗憾，花瓶上印上了砖缝，好多叶子没印清楚，最后放的红色叶子还违背了叶子生长的规律，但还是非常快乐，这就是不完美的真实的样子。更让人满足的是这个过程，好像又探索了生活的一面。\n摆放效果 最终成品 从找叶子开始，我就时常想，如果不是给她的生日礼物，如果能跟她一起做这件事就好了。开始期待下一个秋天。\n","permalink":"https://qilinz.github.io/posts/leaf-rubbing/","summary":"一直在愁女朋友生日准备什么礼物，刚好看到象友做了叶拓，真是再适合不过的礼物了。网上查了查制作方法 、看了看视频 ，就决定用叶子本身的颜色、而不是用颜料，来拓印到帆布袋上。\n第一步：选布面 帆布袋、方巾、衣服都可以，感觉是棉的就行，我也不太了解有什么限制。我选择的是帆布袋，亚马逊上买到的，自然颜色，密度是145gr/m2，最后印出来效果感觉很不错。这个视频 提到说，白色布和黄色布印出来的效果不一样。如果方便买到不同颜色的布的话，可以都买来试试。我很想试，但太难搞了，感觉在浪费钱\u0026hellip;也不想拥有20个帆布袋\u0026hellip;\n第二步：找叶子 我是打算做秋天的主题，想使用一些黄色、红色的叶子。也只想捡落叶，不想从植物上掰。后面拓的时候就发现，这是给自己找了多大的难题。落叶的含水量会低很多，变黄、变红的叶子的含水量也比绿色落叶更低，导致要花很多的功夫才能让颜色印在布上面。这也导致了有些容易流失水分的叶子必须制作当天采集。如果叶子表面比较光滑、摸起来硬一些，这种可以隔天，水分还是会保留下来。如果第一次尝试想轻松一点，就找一些水分多的叶子。如果还是希望颜色丰富选择一些水分少的也不用担心，后面拓的时候也有一点小窍门～\n找叶子要注意的另外一点就是，每种叶子多找几个。一是因为可以每种先拿一个在多余的布上试试拓出来的效果（颜色和脉络），选出更喜欢的叶子，也给正式制作一些灵感、多一些练习；二是给正式制作留一些余地。如果还没想好做什么，就也不知道到底需要几片叶子。再就是在摆到布上面的时候，会发现叶子的大小跟捡的时候的感觉很不一样，可以大大小小都捡一些。\n找叶子这个过程太快乐了。第一次把眼睛长在地上长在叶子上，就发现了家旁边原来有这么丰富的植物种类，发现原来有些树的叶子如此不对称。不同的叶子的软硬、含水量在手里的触感是如此不同。不同时间掉落的叶子拥有不同的干枯状态。这一切都太神奇了。\n不同干枯状态的同种叶子 还会遇到一些惊喜，我在花坛里捡叶子的时候，发现背面有一只蜗牛。我真的是太喜欢这个叶子了，站在那里纠结半天，最后还是放了回去，希望蜗牛没觉得被打扰。\n在叶子上安家的蜗牛 找叶子这个过程也会有一些压力，因为要顶住路人注视。我想捡的一种叶子是行道树，还在商场旁边，做了很久心里建设才蹲下来仔细看每一个落叶。路人一定会好奇会看的，不过捡多了就不怕了，脸皮会越来越厚的！还有就是，毕竟是从地上捡，怕脏的朋友们记得带纸巾或者洗手液。\n关于捡叶子的地点，我主要是捡的家附近的路边的植物，还在街区公园捡到了可爱的红色小树叶。我也去了植物园，但没捡到什么，一个是落叶不太多，二是感觉反而没有行道树好看。可能植物园更在意的是花朵吧，倒是有可能在地上捡到一些花瓣。不过重要的就是享受这个过程，没有捡到合适的树叶也可能在植物园里发现别的美好事物。这种悠闲又好奇的心情，太让人觉得舒适了。把一兜叶子带回家的时候，仿佛也把秋天带回来了。\n一片美丽的枫叶 第三步：拓印 在拓印这一步我好像能犯的错误都犯了哈哈哈哈哈哈。\n1 场地 首先要找到一个平整的场地。我在阳台上搞的，想着能尽量降低一下噪音。结果忘记了地面是迷你块的瓷砖，垫的袋子根本不够厚，把地砖缝也印出来了\u0026hellip;一点也没敲上色\u0026hellip;如果想做一些图案倒是个很好的办法，但如果不是的话，一定找个板子垫在下面，我最后垫的菜板。锤的声音还是挺大的，而且还需要锤很久，对我来说最理想的场地可能就是室外了。\n2 工具 网上教程都说用橡皮锤。我本来也打算去买一个的，但想想，我的宜家套装里的锤子也有个橡皮套，四舍五入就是橡皮锤了，最后就没买。拓的时候发现，用橡皮锤还是有道理的，宜家这个锤子太重了，锤到我怀疑人生。第二天发现大拇指磨掉了一层皮，如果跟我一样莽的请记得戴手套。橡皮锤好像头也更小一些，感觉可以拓得更精细。\n3 方式 叶子要提前清洗擦干。清洗一串叶子的时候要小心，这些叶子也许一碰就掉了。这种叶子我就是用最小的水流冲了冲正面和背面，还是掉了一些。不过没关系，记住叶子的生长方式（排列和方向），留好，等到时候拼一拼就好了。\n清洗叶子 我先把我想用的叶子在一个帆布袋上锤了锤，试了试，看看颜色，试图掌握一些锤的技巧。仔细感受了一下锤多久能出颜色，感受了下出颜色的叶子的状态。锤完之后的叶子非常有趣，放阳光下看感觉像编织袋。之前提到的有蜗牛的那种硬的洗洗的叶子，在敲碎之后还会闻到捡的时候完全闻不到的味道，真好闻啊！\n锤过的叶子的纹路 试完之后就拿了一个新的帆布袋在上面摆了摆图案，用手机拍了一张效果图。之后就拿到阳台上准备开始拓了。我在上面和下面都垫了塑料透明的袋子，下面是防止印到帆布袋的背面，上面是为了能看到锤的位置和不让颜色沾到锤子上面。叶子正面反面的效果也不一样，以及背面的水分会比正面多，我都是正面朝上，让背面接触布料。\n锤的时候最好直上直下地锤，因为叶子可能会被锤跑。最开始就慢慢来，找找感觉。锤的时候我有把叶子掀起来看有没有印上去，没印上去的感觉确实很沮丧，我也把叶子锤跑过，但摆回位置继续锤就行，不用太担心，相信自然就好啦。\n之前又说到我捡的叶子水分不是很够，我想了想，觉得是需要更好地方式把水锤出来，也就是更严重地破坏叶子来让水渗透出来。最后就用的锤子另外一面用来拔钉子的，扁扁的，果然更有效了。但要注意的是，这种扁的，锤出来的效果会是一条一条的线（见下图），可能也没什么叶子的脉络。还是像前面说的，先在别的布上试一试，看看是不是能接受的效果。\n扁面锤出的横纹效果 网上的教程还提到了固色剂，来保留颜色。我没买，想着，就让\u0026quot;叶子\u0026quot;们自然下去吧。\n⚠️：拓的过程一定注意休息\n第四步：享受成果 说是享受成果，其实是收拾残局，把叶子们都收拾好处理掉，各种工具进行归位，拓这个过程真的是极大地损伤了我的积极性，用没什么水分的叶子的自身的颜色拓真是太难了。不过等收好休息好之后，看看成品，真的很开心。虽然成品上到处都是遗憾，花瓶上印上了砖缝，好多叶子没印清楚，最后放的红色叶子还违背了叶子生长的规律，但还是非常快乐，这就是不完美的真实的样子。更让人满足的是这个过程，好像又探索了生活的一面。\n摆放效果 最终成品 从找叶子开始，我就时常想，如果不是给她的生日礼物，如果能跟她一起做这件事就好了。开始期待下一个秋天。","title":"用叶拓留住秋天"},{"content":" 搭建过程主要参考（过程大体一致，添加了一些细节和我遇到的问题）：\nRSS | RSSHub 搭配 Miniflux，实现订阅自由 Miniflux | 利用Docker-compose搭建RSS阅读器 该文适合人群：想用自定义的域名来访问Miniflux。\n1. 安装docker 和docker-compose 我使用的VPS系统是Ubuntu，就根据官方的Ubuntu安装文档 装的docker。装好docker之后，在VPS中命令行中运行以下语句，即可安装docker-compose：\napt install docker-compose 2. 通过docker-compose安装Miniflux （1）创建并进入你想安装Miniflux的文件夹：\nmkdir ~/miniflux # 在根目录创建名为miniflux的文件夹 cd ~/miniflux # 进入miniflux文件夹 （2）创建docker-compose.yml文件：\nnano docker-compose.yml # 使用nano编辑器创建，会自动打开文件以写入内容 （3）在文件中写入以下内容并保存*：\nversion: \u0026#39;3.4\u0026#39; services: miniflux: image: miniflux/miniflux:latest ports: - \u0026#34;127.0.0.1:8080:8080\u0026#34; #调整一：增加localhost ip 并改port为8080 depends_on: - db environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin # 登录Miniflux的用户名，可自定义 - ADMIN_PASSWORD=password # 登录Miniflux的密码，可自定义，至少6位 - \u0026#34;BASE_URL=https://enter.your.url\u0026#34; # 调整二：输入想用来访问Miniflux的域名 healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;/usr/bin/miniflux\u0026#34;, \u0026#34;-healthcheck\u0026#34;, \u0026#34;auto\u0026#34;] db: image: postgres:latest environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;pg_isready\u0026#34;, \u0026#34;-U\u0026#34;, \u0026#34;miniflux\u0026#34;] interval: 10s start_period: 30s volumes: miniflux-db: 该docker-compose.yml 文档内容基于Miniflux官方文档 ，并在细节上进行了调整。调整有两处：一是将port改为127.0.0.1:8080:8080，主要目的是错开常用port 80，并调整localhost为127.0.0.1来跟nginx的设置一致（如不调整，miniflux将使用0.0.0.0，无法顺利运行nginx）；二是在miniflux的environment中加入新的configuration BASE_URL，请将内容换为你想用来访问Miniflux的域名（不确定这一步是否必要，我参考的博客都没有这一步）。\n*如何用nano保存文件：可以使用ctrl+X，在退出编辑时，选择Y来保存所有更改，再敲一次回车便可以回到命令行。\n（4）运行以下代码进行安装：\ndocker-compose up -d 在浏览器中访问服务器ip:端口号（如http://123.45.67.890:8080），如显示登录界面，即代表安装成功啦。\n3. 使用Nginx进行反向代理 我的理解里，使用Nginx进行反向代理主要是为了让一个服务器ip可以使用多个不同网址，即通过Nginx，使用不同域名可以获取服务器上不同的服务。\n（1）在DNS服务商添加一条A记录，将自定义域名指向服务器的ip地址。\n（2）服务器命令行中安装nginx：\napt install nginx -y （3）创建miniflux.conf文件：\nnano /etc/nginx/conf.d/miniflux.conf （4）在文件中写入以下内容并保存：\nserver { listen 80; server_name enter.your.url; location / { proxy_pass http://127.0.0.1:8080; #8080改为miniflux对外开放的端口，默认为8080 proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 请将server_name的内容改为想要用来访问Miniflux的域名。\n（5）测试Nginx配置文件是否正确：\nnginx -t 如显示以下内容，即表示没问题：\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful （6）没有错误时，运行：\nnginx -s reload systemctl start nginx systemctl enable nginx （7）安装certbot（根据官方文档 ）:\nsudo apt install certbot apt-get install python3-certbot-nginx （8）运行以下代码，并根据步骤获取SSL证书：\ncertbot --nginx 注意是两个\u0026quot;-\u0026quot;\n现在就可以在浏览器通过设定的域名来访问Miniflux啦！ 4. 其他问题 （1）使用certbot（\u0026ldquo;Let\u0026rsquo;s Encrypt\u0026quot;服务）获取SSL证书时有请求上限，每个账号的每个域名每小时只有5次请求失败次数。假如失败次数过多，就只能等下个小时了，详情见官方说明 。\n（2）docker-compose.yml 文件对缩紧非常敏感，如遇到yaml.parser.ParserError，可以将文件里的内容放到这个网站 去看看自己的空格是不是哪里有问题。\n5. 其他资源 （1） Miniflux官方文档 ，主要讲如何配置、设置反向代理和部署到一些网站.\n","permalink":"https://qilinz.github.io/posts/miniflux-with-nginx/","summary":"搭建过程主要参考（过程大体一致，添加了一些细节和我遇到的问题）：\nRSS | RSSHub 搭配 Miniflux，实现订阅自由 Miniflux | 利用Docker-compose搭建RSS阅读器 该文适合人群：想用自定义的域名来访问Miniflux。\n1. 安装docker 和docker-compose 我使用的VPS系统是Ubuntu，就根据官方的Ubuntu安装文档 装的docker。装好docker之后，在VPS中命令行中运行以下语句，即可安装docker-compose：\napt install docker-compose 2. 通过docker-compose安装Miniflux （1）创建并进入你想安装Miniflux的文件夹：\nmkdir ~/miniflux # 在根目录创建名为miniflux的文件夹 cd ~/miniflux # 进入miniflux文件夹 （2）创建docker-compose.yml文件：\nnano docker-compose.yml # 使用nano编辑器创建，会自动打开文件以写入内容 （3）在文件中写入以下内容并保存*：\nversion: \u0026#39;3.4\u0026#39; services: miniflux: image: miniflux/miniflux:latest ports: - \u0026#34;127.0.0.1:8080:8080\u0026#34; #调整一：增加localhost ip 并改port为8080 depends_on: - db environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin # 登录Miniflux的用户名，可自定义 - ADMIN_PASSWORD=password # 登录Miniflux的密码，可自定义，至少6位 - \u0026#34;BASE_URL=https://enter.your.url\u0026#34; # 调整二：输入想用来访问Miniflux的域名 healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;/usr/bin/miniflux\u0026#34;, \u0026#34;-healthcheck\u0026#34;, \u0026#34;auto\u0026#34;] db: image: postgres:latest environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;pg_isready\u0026#34;, \u0026#34;-U\u0026#34;, \u0026#34;miniflux\u0026#34;] interval: 10s start_period: 30s volumes: miniflux-db: 该docker-compose.","title":"使用Docker搭建Miniflux并使用Nginx进行反向代理"},{"content":"在27岁这一年，我终于正式开始工作了。经历过gap year、休学，换过无数方向的我终于开始工作了。\n0 背景介绍 我一直都是经济学背景，在法国读书，读硕士的时候为了好找工作，自学了数据分析。课程结束后，机缘巧合获得了一份产品经理的实习。放弃了转正之后就开始了漫长的找工作过程。在找工作的前三个月，我找的都是product manager或者product analyst。我当时的想法是因为我有这个实习背景，所以应该能好找一些，等拿到多年居留卡之后再转到程序员的职位。大概投了一百份简历，实习和正职都投，面试不断但都没活过一面。我感觉是因为欧洲对pm的语言、学历背景、工作经验的要求都很高，就算是junior的pm基本要求也是2年的全职经验，我一点优势都没有。\n我一直都对写代码挺感兴趣的，本科的时候就学过一些，但是断断续续都放弃了。有一天突然就在想，既然我早晚都相当程序员，那为什么不是现在？\n当时居留还有10个月。于是我准备的方案就是，开始学编程，努力找工作，找不到工作就换自由职业者自己解决居留问题。\n1 学习阶段 2021年11月，我就开始了高强度学习。每天学6小时，多的时候也会到8-10小时，提不起兴致的时候也会休息两天。因为我本身知识上欠缺比较多，主要目标还是学知识、做项目，刷题目标是会做leetcode easy。具体来说：\n2021.11 - 2021.12: Udemy 100 Day of Code: The Complete Python Pro Bootcamp by Angela Yu 2022.1: Jetbrains Python Code track （安利嘟，记录嘟） 2022.2: Leetcode Top Interview questions Easy （记录嘟） 2022.3: Full Stack open （JavaScript-based web development，只学了前三章） 一开始的学习都集中在Python，后面投简历迟迟收不到回应就开始学js，为当一个前端自由职业者做准备。\n2 面试阶段 2022年1月，我开始零零碎碎投简历，一直到2月下旬才开始密集投简历。因为我本身不会法语，所以只能投英语的岗位，选择没有特别多，但也比之前投pm的多了不少。我投的方向是：Python developer，Data Engineer 和不要求编程语言的Junior Software Engineer（前端、后端、全栈都投了）。地区的话，主投法国，零散投了一些德国和英国。\n第一波密集投简历等了3周才开始有回应，收到了一个data engineer的online test，一个python 爬虫岗的电面，还拿到了一个后端实习的内推。Online test挂了，爬虫岗拿了offer，实习也拿到了offer但因为拿到了正职的offer就拒绝了。\n爬虫岗的面试要做take-home test，写一个简单的爬虫。我写了很多，除了爬数据之外的代码，我还写了输入验证、各种不同的error handling和数据的简单处理。在第二轮面试给feedback的时候，面试官讲：“我从你的代码看出来你之前是个pm了。” 我好开心，我好喜欢这种用代码说话的感觉。过去的经历在不同方面帮助了我，不管是我自学的数据分析还是产品经理实习，用心做的事情都在这个机会上给了我回报。\n相对于别的职业，程序员在这个过程中真的很简单。\n一个是简历，我看过我的法国朋友（硕士，有一段实习经历）的简历，只是单纯地罗列，没使用任何简历写作技巧，所有需要cover letter的工作全都不投，但还是面试不断；一个是面试，一切都非常简单，一直到最后一轮，我没有被问过任何一个behavioral question。而在我之前投pm的时候，第一轮就会换各种花样布满整个面试。\n我总是在想，是程序员这个职业拥有太多特权，还是其他职业被剥削太多。答案大概是两者都有。\n3 其他准备 为了让自己能够顺利留在法国当程序员，我也准备了很多备选方案。\n签证：找了律师，如果没找到工作就转自由职业。 学校：申请了42 Paris（巴黎的编程学校），过了游戏测试和线下meet。没找到工作就去上学。 实习：申请了Outreachy，也过了初选。 4 转码感受 我一直都以为零基础转码是我这样的，看得多了才知道，原来大家口中的零基础转码指的是去读CS master。确实有种被欺骗的感觉。在我学习的过程中，我是真的很喜欢写python，而且很明显对后端的兴趣比前端浓厚很多。但市场上对后端程序员的学历要求更高，而我是个社科背景。整个转码过程中，真的很容易觉得无助，因为好像放眼望去，只有我一个人没有CS学历，没有上过线下bootcamp，还要被签证限制。\n之前看到长毛象有人说，我当时选的这个吃力不讨好的方向（python后端）是有空间的，我当时感到非常安慰。但投工作的过程中也发现，其实可能不是这样的。我最低估的阻力就是，我没有CS背景的学历。虽然我最初就知道这是个障碍，但并没有如此深刻地明白这个阻力到底有多大。而我也可能是那个找到工作的幸运儿，看到的阻力也可能只是冰山一角。\n本来不该是这样的。学过计算机的人都应该明白，互联网上有你想要的一切，市面上80%的岗位都能靠自学获得需要的知识，更别提这其中很多岗位都会提供培训，前三个月适应，六个月才正式写核心业务。就算是这样的一个职业，都被学历卡得要命。\n为什么？为什么要是这个样子，我常在各个事情上这样想。虽然社会就是这样的，可是为什么？为什么要给人上这么多枷锁，为什么又主动伸出手把自己铐上？为什么？\n5 结语 说幸运我确实很幸运，很幸运地喜欢写代码，很幸运地投了四十份简历就找到了工作。\n可是，\n我本科毕业实习的那年呢？做了一整年很讨厌的工作，再也不想进入金融行业。\n我休学的一年呢？在啤酒、游戏、药物中度过。\n我第二个硕士毕业的那年呢？在中资被摧残，直到现在还ptsd。\n但我也知道自己足够privileged。能读两个硕士，能休学，能雇律师转自由职业者身份，能本科毕业六年才开始工作，我已经有了足够多的自由来做出这些选择。我总是为拥有这些而痛苦，我总觉得我不值得。\n我一直很羡慕一直很明确自己要什么的人，能看到她们很早就走上了“正轨”。而我就是那个不断挣扎的人，我从2014年开始挣扎自己到底想要什么样的人生，而到2022年的今天，我也深知这只是个开始而已。但我相信，我准备好开始这一切了。\n","permalink":"https://qilinz.github.io/posts/become-a-developer/","summary":"在27岁这一年，我终于正式开始工作了。经历过gap year、休学，换过无数方向的我终于开始工作了。\n0 背景介绍 我一直都是经济学背景，在法国读书，读硕士的时候为了好找工作，自学了数据分析。课程结束后，机缘巧合获得了一份产品经理的实习。放弃了转正之后就开始了漫长的找工作过程。在找工作的前三个月，我找的都是product manager或者product analyst。我当时的想法是因为我有这个实习背景，所以应该能好找一些，等拿到多年居留卡之后再转到程序员的职位。大概投了一百份简历，实习和正职都投，面试不断但都没活过一面。我感觉是因为欧洲对pm的语言、学历背景、工作经验的要求都很高，就算是junior的pm基本要求也是2年的全职经验，我一点优势都没有。\n我一直都对写代码挺感兴趣的，本科的时候就学过一些，但是断断续续都放弃了。有一天突然就在想，既然我早晚都相当程序员，那为什么不是现在？\n当时居留还有10个月。于是我准备的方案就是，开始学编程，努力找工作，找不到工作就换自由职业者自己解决居留问题。\n1 学习阶段 2021年11月，我就开始了高强度学习。每天学6小时，多的时候也会到8-10小时，提不起兴致的时候也会休息两天。因为我本身知识上欠缺比较多，主要目标还是学知识、做项目，刷题目标是会做leetcode easy。具体来说：\n2021.11 - 2021.12: Udemy 100 Day of Code: The Complete Python Pro Bootcamp by Angela Yu 2022.1: Jetbrains Python Code track （安利嘟，记录嘟） 2022.2: Leetcode Top Interview questions Easy （记录嘟） 2022.3: Full Stack open （JavaScript-based web development，只学了前三章） 一开始的学习都集中在Python，后面投简历迟迟收不到回应就开始学js，为当一个前端自由职业者做准备。\n2 面试阶段 2022年1月，我开始零零碎碎投简历，一直到2月下旬才开始密集投简历。因为我本身不会法语，所以只能投英语的岗位，选择没有特别多，但也比之前投pm的多了不少。我投的方向是：Python developer，Data Engineer 和不要求编程语言的Junior Software Engineer（前端、后端、全栈都投了）。地区的话，主投法国，零散投了一些德国和英国。\n第一波密集投简历等了3周才开始有回应，收到了一个data engineer的online test，一个python 爬虫岗的电面，还拿到了一个后端实习的内推。Online test挂了，爬虫岗拿了offer，实习也拿到了offer但因为拿到了正职的offer就拒绝了。\n爬虫岗的面试要做take-home test，写一个简单的爬虫。我写了很多，除了爬数据之外的代码，我还写了输入验证、各种不同的error handling和数据的简单处理。在第二轮面试给feedback的时候，面试官讲：“我从你的代码看出来你之前是个pm了。” 我好开心，我好喜欢这种用代码说话的感觉。过去的经历在不同方面帮助了我，不管是我自学的数据分析还是产品经理实习，用心做的事情都在这个机会上给了我回报。\n相对于别的职业，程序员在这个过程中真的很简单。\n一个是简历，我看过我的法国朋友（硕士，有一段实习经历）的简历，只是单纯地罗列，没使用任何简历写作技巧，所有需要cover letter的工作全都不投，但还是面试不断；一个是面试，一切都非常简单，一直到最后一轮，我没有被问过任何一个behavioral question。而在我之前投pm的时候，第一轮就会换各种花样布满整个面试。","title":"转码心路历程记录"},{"content":"你好\n","permalink":"https://qilinz.github.io/posts/hello-world/","summary":"你好","title":"Hello World"},{"content":"\n喜欢游戏，有一只小狗，想住在海边。\n不擅长一对一即时聊天，现在藏在了长毛象里，欢迎来找我玩。\n","permalink":"https://qilinz.github.io/about/","summary":"我自己","title":"我是栗🌰"}]