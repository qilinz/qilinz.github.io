<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>折腾代码 on 野生栗子🌰</title>
    <link>https://qilinz.github.io/categories/%E6%8A%98%E8%85%BE%E4%BB%A3%E7%A0%81/</link>
    <description>Recent content in 折腾代码 on 野生栗子🌰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 01 Jun 2023 13:29:30 +0200</lastBuildDate><atom:link href="https://qilinz.github.io/categories/%E6%8A%98%E8%85%BE%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工具推荐：帮助检查Python项目Dependencies问题</title>
      <link>https://qilinz.github.io/posts/python-dependency-check/</link>
      <pubDate>Thu, 01 Jun 2023 13:29:30 +0200</pubDate>
      
      <guid>https://qilinz.github.io/posts/python-dependency-check/</guid>
      <description>工作的陈年老项目的requirements.txt超级乱，甚至互相冲突，想要更新一下requirements.txt，结果发现并没有想像中的那么简单，尤其是想要自动化这个过程的时候。最好的方法还是使用package&amp;amp; dependency management 工具， 比如poetry和PDM。我这次还没机会使用，所以不在本文中讨论。 其实基本都是靠ChatGPT推荐的，问ta比看我写的有用。
开始检查前的注意事项： Python版本会有影响。 pip版本会有影响，不同pip版本里解决dependency冲突的方式会不一样。 没有完美自动化解决的工具，都需要不同程度的手动查看。 pip install -r requirements.txt 后pip freeze显示的，大概率会跟requirements.txt 不一样，因为可能会额外下载dependency package。 想知道冲突在哪个package的哪个dependency: pipdeptree 直接引用项目介绍：
pipdeptree is a command line utility for displaying the installed python packages in form of a dependency tree. It works for packages installed globally on a machine as well as in a virtualenv. Since pip freeze shows all dependencies as a flat list, finding out which are the top level packages and which packages do they depend on requires some effort.</description>
    </item>
    
    <item>
      <title>使用Docker搭建Miniflux并使用Nginx进行反向代理</title>
      <link>https://qilinz.github.io/posts/miniflux-with-nginx/</link>
      <pubDate>Sun, 01 May 2022 21:35:46 +0200</pubDate>
      
      <guid>https://qilinz.github.io/posts/miniflux-with-nginx/</guid>
      <description>搭建过程主要参考（过程大体一致，添加了一些细节和我遇到的问题）：
RSS | RSSHub 搭配 Miniflux，实现订阅自由 Miniflux | 利用Docker-compose搭建RSS阅读器 该文适合人群：想用自定义的域名来访问Miniflux。
1. 安装docker 和docker-compose 我使用的VPS系统是Ubuntu，就根据官方的Ubuntu安装文档 装的docker。装好docker之后，在VPS中命令行中运行以下语句，即可安装docker-compose：
apt install docker-compose 2. 通过docker-compose安装Miniflux （1）创建并进入你想安装Miniflux的文件夹：
mkdir ~/miniflux # 在根目录创建名为miniflux的文件夹 cd ~/miniflux # 进入miniflux文件夹 （2）创建docker-compose.yml文件：
nano docker-compose.yml # 使用nano编辑器创建，会自动打开文件以写入内容 （3）在文件中写入以下内容并保存*：
version: &amp;#39;3.4&amp;#39; services: miniflux: image: miniflux/miniflux:latest ports: - &amp;#34;127.0.0.1:8080:8080&amp;#34; #调整一：增加localhost ip 并改port为8080 depends_on: - db environment: - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable - RUN_MIGRATIONS=1 - CREATE_ADMIN=1 - ADMIN_USERNAME=admin # 登录Miniflux的用户名，可自定义 - ADMIN_PASSWORD=password # 登录Miniflux的密码，可自定义，至少6位 - &amp;#34;BASE_URL=https://enter.your.url&amp;#34; # 调整二：输入想用来访问Miniflux的域名 healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;/usr/bin/miniflux&amp;#34;, &amp;#34;-healthcheck&amp;#34;, &amp;#34;auto&amp;#34;] db: image: postgres:latest environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=secret volumes: - miniflux-db:/var/lib/postgresql/data healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;pg_isready&amp;#34;, &amp;#34;-U&amp;#34;, &amp;#34;miniflux&amp;#34;] interval: 10s start_period: 30s volumes: miniflux-db: 该docker-compose.</description>
    </item>
    
  </channel>
</rss>
